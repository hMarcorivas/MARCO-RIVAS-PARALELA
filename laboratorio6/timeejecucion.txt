# include  < stdio.h >
# include  < stdlib.h >
# include  < inttypes.h >
# include  < time.h >
# include  < sys / time.h >
# include  < x86intrin.h >

# define  MICRO (( sin signo  largo ) 1000000 )
# define  NANOS (( sin signo  largo ) 1000000000 )
# Definir  ITERS  300000000
largo  int temp = 0 ;

vacío  foo () {
  para ( int i = 0 ; i <ITERS; i ++)
    temp + = temp;
}

int  main () {

  printf ( " --------------------------------------- \ n " );
  printf ( " gettimeofday () \ n " );
  struct  timeval before, after;
  time_t          elapsedUs;
  gettimeofday (y antes, NULL );
  foo ();
  gettimeofday (y después, NULL );
  elapsedUs = después. tv_usec - antes. tv_usec + (después. tv_sec - antes. tv_sec ) * MICRO;
  printf ( " Tempo total: % lu us - % lf s - Resolução: % lu ns \ n " , elapsedUs, ( double ) elapsedUs / MICRO, NANOS / MICRO);


  / * ===============================================
    ===============================================
    =============================================== * /

  printf ( " --------------------------------------- \ n " );
  printf ( " reloj () \ n " );
  clock_t start = reloj (); // ¡ Desbordamiento en 72 minutos en máquinas de 32 bits!
  foo ();
  double elapsedTime = ( double ) ( reloj () - inicio) / CLOCKS_PER_SEC;
  printf ( " Tempo total: % lf Resolução: % ld ns \ n " , elapsedTime, NANOS / CLOCKS_PER_SEC);

  / * ===============================================
    ===============================================
    =============================================== * /

  printf ( " --------------------------------------- \ n " );
  printf ( " clock_get_time () \ n " );
  uint64_t diff;
  struct  timepec tick, tock;
  clock_gettime (CLOCK_PROCESS_CPUTIME_ID, & tick);
  foo ();
  clock_gettime (CLOCK_PROCESS_CPUTIME_ID, & tock);
  diff = NANOS * (tock. tv_sec - tick. tv_sec ) + tock. tv_nsec - marca. tv_nsec ;
  printf ( " Tempo total:% " PRIu64 " ns - % lf s \ n " , diff, ( double ) diff / NANOS);

  / * Tipos de relógios. Veja: man clock_gettime
     CLOCK_REALTIME
     Reloj de todo el sistema que mide el tiempo real (es decir, el reloj de pared).
     CLOCK_REALTIME_COARSE (desde Linux 2.6.32; específico de Linux)
     Una versión más rápida pero menos precisa de CLOCK_REALTIME.
     CLOCK_MONOTONIC
     Reloj que no se puede configurar y representa el tiempo monótono desde un inicio no especificado
     punto.
     CLOCK_MONOTONIC_COARSE (desde Linux 2.6.32; específico de Linux)
     Una versión más rápida pero menos precisa de CLOCK_MONOTONIC. Úselo cuando lo necesite muy rápido, pero
     No marcas de tiempo de grano fino.
     CLOCK_MONOTONIC_RAW (desde Linux 2.6.28; específico de Linux)
     Similar a CLOCK_MONOTONIC, pero proporciona acceso a un tiempo sin procesar basado en hardware que no es
     sujeto a ajustes de NTP o los ajustes incrementales realizados por adjtime (3).
     CLOCK_BOOTTIME (desde Linux 2.6.39; específico de Linux)
     Idéntico a CLOCK_MONOTONIC, excepto que también incluye cualquier momento en que el sistema esté suspendido.
     pendiente.
     CLOCK_PROCESS_CPUTIME_ID (desde Linux 2.6.12)
     Reloj de tiempo de CPU por proceso (mide el tiempo de CPU consumido por todos los subprocesos en el proceso).
     CLOCK_THREAD_CPUTIME_ID (desde Linux 2.6.12)
     Reloj de tiempo de CPU específico de subproceso.
  * /

  struct  timepec res;
  clock_getres (CLOCK_REALTIME, & res);
  printf ( " Resolução CLOCK_REALTIME:% " PRIu64 " ns \ n " ,
         ( uint64_t ) NANOS * res. tv_sec + res. tv_nsec );
  clock_getres (CLOCK_REALTIME_COARSE, & res);
  printf ( " Resolução CLOCK_REALTIME_COARSE:% " PRIu64 " ns \ n " ,
         ( uint64_t ) NANOS * res. tv_sec + res. tv_nsec );
  clock_getres (CLOCK_MONOTONIC, & res);
  printf ( " Resolução CLOCK_MONOTONIC:% " PRIu64 " ns \ n " ,
         ( uint64_t ) NANOS * res. tv_sec + res. tv_nsec );
  clock_getres (CLOCK_MONOTONIC_COARSE, & res);
  printf ( " Resolução CLOCK_MONOTONIC_COARSE:% " PRIu64 " ns \ n " ,
         ( uint64_t ) NANOS * res. tv_sec + res. tv_nsec );
  clock_getres (CLOCK_PROCESS_CPUTIME_ID, & res);
  printf ( " Resolução CLOCK_PROCESS_CPUTIME_ID:% " PRIu64 " ns \ n " ,
         ( uint64_t ) NANOS * res. tv_sec + res. tv_nsec );
  clock_getres (CLOCK_THREAD_CPUTIME_ID, & res);
  printf ( " Resolução CLOCK_THREAD_CPUTIME_ID:% " PRIu64 " ns \ n " ,
         ( uint64_t ) NANOS * res. tv_sec + res. tv_nsec );
  clock_getres (CLOCK_BOOTTIME, & res);
  printf ( " Resolución CLOCK_BOOTTIME:% " PRIu64 " ns \ n " ,
         ( uint64_t ) NANOS * res. tv_sec + res. tv_nsec );


   / * ===============================================
    ===============================================
    =============================================== * /

  / *
    Para información apenas. Complicado utilizar pois existem diversos
    problemas como:
    - Não tem suporte em todas as arquiteturas
    - Não tem suporte em todos os compiladores
    - Reordenamiento de instruções do processador
    - Variações de frequência
    - Não mede em tempo, mas em ciclos de clock (desconhecido e
      variável)
      - A menos que o procesador suporte "TSC invariante"
   * /
  printf ( " --------------------------------------- \ n " );
  printf ( " __rdtsc () \ n " );
  uint64_t tsc = __rdtsc ();
  foo ();
  uint64_t tsc2 = __rdtsc ();
  uint64_t tscDiff = tsc2 - tsc;
  printf ( " Tempo total:% " PRIu64 " ciclos - Supondo 2.9GHz: % lf s \ n " , tscDiff, ( doble ) tscDiff / 2900000000.0 );

  printf ( " --------------------------------------- \ n " );
}